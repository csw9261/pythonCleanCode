Chapter1. 코드 포매팅과 도구

* 클린 코드의 의미
1) 클린 코드인지 아닌지는 다른 엔지니어가 코드를 읽고 유지 관리 할 수 있는지 여부에 달려있다.
2) 좋은 코드와 나쁜 코드의 차이점을 확인하고 정의 할 수 있어야 한다.

* 클린 코드의 중요성
1) 클린 코드의 기대효과는 민첩한 개발과 지속적인 배포가 가능하다는 것이다.
2) 프로젝트를 예측가능한 속도로 배포하려고 한다면 유지보수가 가능한 좋은 코드를 갖는 것이 필수다.
3) 클린 코드는 수정이 가능한 코드를 만들기 위한 절대적인 요구사항이고 이를 유지하는 것이 중요하다.

* 클린 코드에서 코드 포매팅의 역할
1) 클린 코드란 품질 좋은 소프트웨어를 개발하고 견고하고 유지보수가 쉬운 시스템을 만들고 기술 부채를 피하는 것을 말한다.

# 기술부채: 나쁜 결정이나 적당한 타협의 결과로 생긴 소프트웨어적 결함
# 코드포매팅: 코드를 구조화 하는 것 
# PEP(Python Enhancement Proposal): 파이썬 개선을 위한 제안서, 어떻게 코드를 작성하고 포매팅해야 하는지에 대한 표준 

2) 포매팅이 절대적인 것은 아니지만 작업 효율화를 위해서 중요하다.

* 프로젝트 코딩 스타일 가이드 준수 
1) 좋은 코드 레이아웃에서 가장 필요한 특성은 일관성이다.
2) 개발 팀 모든 멤버가 표준화된 구조를 사용하면 패턴파악이 빨라지고 오류감지가 편하다.
3) 코딩 표준은 PEP-8을 사용하는 것이 이상적이다.
4) PEP-8의 특징 
- 검색 효율성: 
코드에서 원하는 부분을 빠르게 검색 할 수 있도록 도와준다.
변수에 값을 할당하는 경ㅇ우와 함수의 키워드 파라미터에 값을 할당하는 경우를 구분한다.

- 일관성: 
코드가 일정한 포맷을 가지면 쉽게 읽을 수 있다.

- 더 나은 오류 처리 :
PEP-8의 제안 중 하나는 try/exception 블록 내부의 코드를 최소화 하자는 것이다.
실수를 예외로 숨기는 것을 방지하기 위함이다.

- 코드 품질:
코드를 구조화하여 살펴보면 버그와 실수를 쉽게 찾고 코드 이해가 빠르다.

* 문서화(Documentiation)
1) 코드를 문서화 하는 것은 코드에 주석을 추가하는 것과 다르다.
2) 변수나 객체의 타입 정보를 명시해 두는 것이 좋다.

* 코드 주석(code comments)
1) 주석은 가능한 적게하는 것을 목표로 해야한다.
2) 주석 처리된 코드는 나쁜 주석이다.

* Docstring
1) docstring은 소스코드에 포함된 문서이다.
2) docstring은 모듈, 클래스, 메서드 또는 함수에 대해 문서를 제공하기 위한 것이다.
3) 내가 작성한 컴포넌트를 다른 엔지니어가 사용하려고 할 때 docstring을 보고 동작방식, 입출력 정보 등을 확인할 수 있어야 한다.
4) docstring은 프로그램 디자인과 아키텍처에 대해 문서화 할 때도 유용하다.
5) docstring은 코드에서 분리되거나 독립되지 않고 일부가 되어야 한다.
6) docstring의 단점은 지속적으로 수작업을 해야 한다. 그러므로 자명한 코드에는 작성하지 않는다.
7) 가치 있는 문서를 만들기 위해서는 모든 팀원이 문서화에 노력해야 한다.

* 어노테이션(Annotation)
1) 코드 사용자에게 함수 인자로 어떤 값이 와야 하는지 힌트를 주는 것이다.
2) 어노테이션으로 타입 뿐 아니라 인터프리터에서 유효한 어떤것도 사용 가능하다.
ex) 변수 의도를 설명하는 문자열, 콜백이나 유효성 검사 함수로 사용할 수 있는 callable 등등

3) 어노테이션을 활용하면 표현력을 가진 코드 작성이 가능하다.
4) 타입 힌트는 단순히 데이터 타입을 확인하는 것만이 아니라 유의미한 이름을 사용하거나 적절한 데이터 타입 추상화를 하도록 도와준다.
5) 데이터 구조를 따로 정의하여 데이터 구조를 명시적으로 알려주는 것도 좋은 방법이다.

* 어노테이션은 docstring을 대체하는 것일까?
1) docstring과 어노테이션은 서로 보완적인 개념이다.

* 도구 설정
1) 당연한 검사를 위해 시간을 투자하지 말고 검사는 자동화 하여 테스트와 체크리스트가 지속적으로 통합 빌드의 하나가 되도록 해야 한다.
2) 빌드 중 테스트를 통과 못한다면 빌드 실패를 하게 해야 코드 구조를 일관되게 유지 할 수 있다.

* 데이터 타입 일관성 검사
1) 타입 어노테이션을 사용하면 해당 변수가 어떤 데이터 타입을 가져야 하는지 명시 할 수 있다.
2) 데이터 타입의 일관성을 확인하기 위한 도구로 mypy와 pytype이 있다.

* 요약
1) 클린 코드가 코드의 구조나 레이아웃보다 더 중요하다
2) 클린 코드는 기술 부채를 최소화하고 가독성과 유지보수성, 타인의 이해도를 높인다.










